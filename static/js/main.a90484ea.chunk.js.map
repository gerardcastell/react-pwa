{"version":3,"sources":["logo.svg","api/arasaac.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","axios","create","baseURL","App","useState","images","setImages","language","keyword","setKeyword","loading","setloading","onClickSearch","a","arasaac","get","response","console","log","imagesFetched","data","img","idPictogram","responseType","imgFetched","blob","Blob","type","headers","image","URL","createObjectURL","push","className","placeholder","value","onChange","e","target","onClick","style","display","flexDirection","width","map","src","alt","height","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","process","href","origin","addEventListener","fetch","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a90484ea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"http://api.arasaac.org/api/pictograms/\"\n});\n","import React, { useState } from \"react\";\nimport logo from \"../logo.svg\";\nimport \"./App.css\";\nimport arasaac from \"../api/arasaac\";\n\nconst App = () => {\n  const [images, setImages] = useState([]);\n  const [language, setLanguage] = useState(\"es\");\n  const [keyword, setKeyword] = useState(\"\");\n  const [loading, setloading] = useState(true);\n\n  const onClickSearch = async () => {\n    if (keyword !== \"\") {\n      const response = await arasaac.get(`${language}/search/${keyword}`);\n      console.log(response);\n      const imagesFetched = [];\n      for await (let img of response.data) {\n        const imgFetched = await arasaac.get(`${img.idPictogram}`, {\n          responseType: \"arraybuffer\"\n        });\n        let blob = new Blob([imgFetched.data], {\n          type: imgFetched.headers[\"content-type\"]\n        });\n        let image = URL.createObjectURL(blob);\n        imagesFetched.push(image);\n        console.log(\"dentro\");\n      }\n      console.log(\"fuera\");\n      console.log(imagesFetched);\n      setImages(imagesFetched);\n      setloading(false);\n    }\n  };\n  const displayImages = () => {\n    if (loading) {\n      return <>There are no images</>;\n    } else {\n      console.log(images[0]);\n      return (\n        <>\n          {images.map(image => (\n            <img\n              src={image}\n              alt={\"hola\"}\n              style={{ height: \"75px\", width: \"75pxs\" }}\n            />\n          ))}\n          {/* {images.map(image => (\n            <img key={image.config.url} src={image.data} alt={\"hola\"} />\n          ))} */}\n        </>\n      );\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header>Bilingually Functional Demo</header>\n      <div className=\"App-browser\">\n        <title>Introduce una palabra para buscar</title>\n        <input\n          type=\"text\"\n          placeholder=\"Word to search...\"\n          value={keyword}\n          onChange={e => setKeyword(e.target.value)}\n        />\n        <button onClick={() => onClickSearch()}>Search</button>\n      </div>\n      <div\n        className=\"App-images\"\n        style={{ display: \"flex\", flexDirection: \"row\", width: 500 }}\n      >\n        {displayImages()}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}